// Code generated by MockGen. DO NOT EDIT.
// Source: src/user/ports/db_connection_port.go

// Package user_mock is a generated GoMock package.
package user_mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDBConnectionPort is a mock of DBConnectionPort interface.
type MockDBConnectionPort struct {
	ctrl     *gomock.Controller
	recorder *MockDBConnectionPortMockRecorder
}

// MockDBConnectionPortMockRecorder is the mock recorder for MockDBConnectionPort.
type MockDBConnectionPortMockRecorder struct {
	mock *MockDBConnectionPort
}

// NewMockDBConnectionPort creates a new mock instance.
func NewMockDBConnectionPort(ctrl *gomock.Controller) *MockDBConnectionPort {
	mock := &MockDBConnectionPort{ctrl: ctrl}
	mock.recorder = &MockDBConnectionPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBConnectionPort) EXPECT() *MockDBConnectionPortMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockDBConnectionPort) Get(destiny any, conditions ...any) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{destiny}
	for _, a := range conditions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockDBConnectionPortMockRecorder) Get(destiny interface{}, conditions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{destiny}, conditions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDBConnectionPort)(nil).Get), varargs...)
}

// Insert mocks base method.
func (m *MockDBConnectionPort) Insert(value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockDBConnectionPortMockRecorder) Insert(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDBConnectionPort)(nil).Insert), value)
}

// List mocks base method.
func (m *MockDBConnectionPort) List(destiny any, conditions ...any) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{destiny}
	for _, a := range conditions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockDBConnectionPortMockRecorder) List(destiny interface{}, conditions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{destiny}, conditions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDBConnectionPort)(nil).List), varargs...)
}

// Query mocks base method.
func (m *MockDBConnectionPort) Query(destiny any, query string, queryArgs ...any) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{destiny, query}
	for _, a := range queryArgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockDBConnectionPortMockRecorder) Query(destiny, query interface{}, queryArgs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{destiny, query}, queryArgs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDBConnectionPort)(nil).Query), varargs...)
}

// Update mocks base method.
func (m *MockDBConnectionPort) Update(value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDBConnectionPortMockRecorder) Update(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDBConnectionPort)(nil).Update), value)
}

// Upsert mocks base method.
func (m *MockDBConnectionPort) Upsert(value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockDBConnectionPortMockRecorder) Upsert(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockDBConnectionPort)(nil).Upsert), value)
}
