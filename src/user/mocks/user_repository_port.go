// Code generated by MockGen. DO NOT EDIT.
// Source: src/user/ports/user_repository_port.go

// Package user_mock is a generated GoMock package.
package user_mock

import (
	domain "Go-Hexagonal/src/user/domain"
	ports "Go-Hexagonal/src/user/ports"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepoPort is a mock of UserRepoPort interface.
type MockUserRepoPort struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoPortMockRecorder
}

// MockUserRepoPortMockRecorder is the mock recorder for MockUserRepoPort.
type MockUserRepoPortMockRecorder struct {
	mock *MockUserRepoPort
}

// NewMockUserRepoPort creates a new mock instance.
func NewMockUserRepoPort(ctrl *gomock.Controller) *MockUserRepoPort {
	mock := &MockUserRepoPort{ctrl: ctrl}
	mock.recorder = &MockUserRepoPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepoPort) EXPECT() *MockUserRepoPortMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepoPort) Create(user ports.UserPort, createdBy string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user, createdBy)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserRepoPortMockRecorder) Create(user, createdBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepoPort)(nil).Create), user, createdBy)
}

// Get mocks base method.
func (m *MockUserRepoPort) Get(filters ports.GetUserRepoFiltersDTO) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", filters)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserRepoPortMockRecorder) Get(filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserRepoPort)(nil).Get), filters)
}

// List mocks base method.
func (m *MockUserRepoPort) List(filters ports.ListUsersRepoFiltersDTO) ([]*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", filters)
	ret0, _ := ret[0].([]*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUserRepoPortMockRecorder) List(filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUserRepoPort)(nil).List), filters)
}

// Update mocks base method.
func (m *MockUserRepoPort) Update(user ports.UserPort, updatedBy string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", user, updatedBy)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserRepoPortMockRecorder) Update(user, updatedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepoPort)(nil).Update), user, updatedBy)
}
